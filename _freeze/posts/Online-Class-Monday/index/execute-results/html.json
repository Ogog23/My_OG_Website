{
  "hash": "f6513689d9db0295f0afa1f670b2a41c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Online Class Monday\"\nauthor: \"Gayatri Jadhav\"\n---\n\n\n\n\nwkt - wellknown text\n\n<https://av-quarto.netlify.app/content/labs/r-labs/maps/gram-maps.html>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rnaturalearth)\nlibrary(rnaturalearthdata)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'rnaturalearthdata'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:rnaturalearth':\n\n    countries110\n```\n\n\n:::\n\n```{.r .cell-code}\n# Run this in your console first\n# devtools::install_github(\"ropensci/rnaturalearthhires\")\nlibrary(rnaturalearthhires)\n\n# Plotting Maps\nlibrary(tidyverse) # Maps using ggplot + geom_sf\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tmap) # Thematic Maps, static and interactive\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nBreaking News: tmap 3.x is retiring. Please test v4, e.g. with\nremotes::install_github('r-tmap/tmap')\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(osmdata) # Fetch map data from osmdata.org\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nData (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(leaflet) # interactive Maps\nlibrary(threejs) # Globe maps in R. Part of the htmlwidgets family of packages\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: igraph\n\nAttaching package: 'igraph'\n\nThe following objects are masked from 'package:lubridate':\n\n    %--%, union\n\nThe following objects are masked from 'package:dplyr':\n\n    as_data_frame, groups, union\n\nThe following objects are masked from 'package:purrr':\n\n    compose, simplify\n\nThe following object is masked from 'package:tidyr':\n\n    crossing\n\nThe following object is masked from 'package:tibble':\n\n    as_data_frame\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\nThe following object is masked from 'package:base':\n\n    union\n```\n\n\n:::\n\n```{.r .cell-code}\n# For Spatial Data Frame Processing\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLinking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.3.1; sf_use_s2() is TRUE\n```\n\n\n:::\n:::\n\n\n\n\n<https://av-quarto.netlify.app/content/courses/r4artists/modules/90-gom/spatial>\n\n<https://arvindvenkatadri.com/labs/r-for-artists/06-spatial/06-grammar-of-maps>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# https://boundingbox.klokantech.com\n# CSV: 77.574028,12.917262,77.595073,12.939895\nbbox_1 <- matrix(\n  c(77.574028, 12.917262, 77.595073, 12.939895),\n  byrow = FALSE,\n  nrow = 2,\n  ncol = 2,\n  dimnames = list(c('x', 'y'), c('min', 'max'))\n)\nbbox_1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       min      max\nx 77.57403 77.59507\ny 12.91726 12.93989\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using getbb command from the osmdata package\nbbox_2 <- osmdata::getbb(\"Jayanagar, Bangalore, India\")\nbbox_2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       min      max\nx 77.58528 77.58929\ny 12.93650 12.94369\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nosmdata::available_features() %>% as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 272 × 1\n   value                  \n   <chr>                  \n 1 4wd_only               \n 2 abandoned              \n 3 abutters               \n 4 access                 \n 5 addr                   \n 6 addr:city              \n 7 addr:conscriptionnumber\n 8 addr:country           \n 9 addr:county            \n10 addr:district          \n# ℹ 262 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\navailable_tags(feature = \"highway\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 56 × 2\n   Key     Value              \n   <chr>   <chr>              \n 1 highway bridleway          \n 2 highway bus_guideway       \n 3 highway bus_stop           \n 4 highway busway             \n 5 highway construction       \n 6 highway corridor           \n 7 highway crossing           \n 8 highway cycleway           \n 9 highway cyclist_waiting_aid\n10 highway elevator           \n# ℹ 46 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\navailable_tags(\"amenity\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 137 × 2\n   Key     Value          \n   <chr>   <chr>          \n 1 amenity animal_boarding\n 2 amenity animal_breeding\n 3 amenity animal_shelter \n 4 amenity animal_training\n 5 amenity arts_centre    \n 6 amenity atm            \n 7 amenity baby_hatch     \n 8 amenity baking_oven    \n 9 amenity bank           \n10 amenity bar            \n# ℹ 127 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\navailable_tags(\"natural\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 49 × 2\n   Key     Value        \n   <chr>   <chr>        \n 1 natural arch         \n 2 natural arete        \n 3 natural bare_rock    \n 4 natural bay          \n 5 natural beach        \n 6 natural blockfield   \n 7 natural blowhole     \n 8 natural cape         \n 9 natural cave_entrance\n10 natural cliff        \n# ℹ 39 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Eval is set to false here\n# This code is for reference\n# Run these commands ONCE in your Console\n# Or run this chunk manually one time\n\n# Get all restaurants, atms, colleges within my bbox\nlocations <- \n  osmdata::opq(bbox = bbox_2) %>% \n  osmdata::add_osm_feature(key = \"amenity\", \n                           value = c(\"restaurant\", \"atm\", \"college\")) %>% \n  osmdata_sf() %>%  # Convert to Simple Features format\n  purrr::pluck(\"osm_points\") # Pull out the data frame of interest\n\n# Get all buildings within my bbox\ndat_buildings <-\n  osmdata::opq(bbox = bbox_2) %>% \n  osmdata::add_osm_feature(key = \"building\") %>% \n  osmdata_sf() %>% \n  purrr::pluck(\"osm_polygons\") \n\n# Get all residential roads within my bbox\ndat_roads <- \n  osmdata::opq(bbox = bbox_2) %>% \n  osmdata::add_osm_feature(key = \"highway\", \n                           value = c(\"residential\")) %>% \n  osmdata_sf() %>% \n  purrr::pluck(\"osm_lines\") \n\n# Get all parks / natural /greenery areas and spots within my bbox\ndat_natural <-   \n  osmdata::opq(bbox = bbox_2) %>% \n  osmdata::add_osm_feature(key = \"natural\",\n                           value = c(\"tree\", \"water\", \"wood\")) %>% \n  osmdata_sf()\ndat_natural\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nObject of class 'osmdata' with:\n                 $bbox : 12.9364951,77.5852775,12.9436891,77.5892901\n        $overpass_call : The call submitted to the overpass API\n                 $meta : metadata including timestamp and version numbers\n           $osm_points : 'sf' Simple Features Collection with 0 points\n            $osm_lines : NULL\n         $osm_polygons : 'sf' Simple Features Collection with 0 polygons\n       $osm_multilines : NULL\n    $osm_multipolygons : NULL\n```\n\n\n:::\n\n```{.r .cell-code}\ndat_trees <- \n  dat_natural %>% \n  purrr::pluck(\"osm_points\") \n\ndat_greenery <- \n  dat_natural %>% pluck(\"osm_polygons\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Eval is set to false here\n# This code is for reference\n# Run these commands ONCE in your Console\n# Or manually run this chunk once\n\nst_write(dat_roads, dsn = \"roads.gpkg\", \n         append = FALSE, quiet = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDeleting layer `roads' using driver `GPKG'\nWriting layer `roads' to data source `roads.gpkg' using driver `GPKG'\nWriting 39 features with 8 fields and geometry type Line String.\n```\n\n\n:::\n\n```{.r .cell-code}\nst_write(dat_buildings, \n         dsn = \"buildings.gpkg\", \n         append = FALSE, \n         quiet = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDeleting layer `buildings' using driver `GPKG'\nWriting layer `buildings' to data source `buildings.gpkg' using driver `GPKG'\nWriting 551 features with 9 fields and geometry type Polygon.\n```\n\n\n:::\n\n```{.r .cell-code}\nst_write(dat_greenery, dsn = \"greenery.gpkg\", \n         append = FALSE,quiet = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDeleting layer `greenery' using driver `GPKG'\nWriting layer `greenery' to data source `greenery.gpkg' using driver `GPKG'\nWriting 0 features with 1 fields and geometry type Polygon.\n```\n\n\n:::\n\n```{.r .cell-code}\nst_write(dat_trees, dsn = \"trees.gpkg\", \n         append = FALSE,quiet = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDeleting layer `trees' using driver `GPKG'\nWriting layer `trees' to data source `trees.gpkg' using driver `GPKG'\nWriting 0 features with 1 fields and geometry type Point.\n```\n\n\n:::\n:::\n\n\n\n\n<https://en.wikipedia.org/wiki/Great_circle>\n\n<https://av-quarto.netlify.app/content/courses/analytics/inference/listing>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}