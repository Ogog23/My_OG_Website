{
  "hash": "3dfb9ca7676e73f25b36861410466004",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"A3 - Cartoons Dataset\"\nauthor: \"Gayatri Jadhav\"\nprof: \"Arvind Venkatadri\"\n---\n\n\n\n## Introduction\n\nThis dataset shows ratings given by MAHE students to different cartoons. Each entry includes a Participant ID, Gender, Cartoon name, and Rating. The aim is to see if there are significant differences in how people rate each cartoon. By using ANOVA, we can find out if some cartoon is consistently rated higher or lower than the other.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # Tidy data processing\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggformula) # Formula based plots\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n\tlearnr::run_tutorial(\"introduction\", package = \"ggformula\")\n\tlearnr::run_tutorial(\"refining\", package = \"ggformula\")\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(mosaic) # Data inspection and Statistical Inference\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following object is masked from 'package:scales':\n\n    rescale\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(broom) # Tidy outputs from Statistical Analyses\nlibrary(infer) # Statistical Inference, Permutation/Bootstrap\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'infer'\n\nThe following objects are masked from 'package:mosaic':\n\n    prop_test, t_test\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(patchwork) # Arranging Plots\nlibrary(ggprism) # Interesting Categorical Axes\nlibrary(supernova) # Beginner-Friendly ANOVA Tables\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'supernova'\n\nThe following object is masked from 'package:scales':\n\n    number\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reading in the data\ncartoon <- read_csv(\"../../Data/Cartoon.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 90 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Participant ID, Gender, Cartoon\ndbl (1): Rating\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(cartoon)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 90\nColumns: 4\n$ `Participant ID` <chr> \"P1\", \"P2\", \"P3\", \"P4\", \"P5\", \"P6\", \"P7\", \"P8\", \"P9\",…\n$ Gender           <chr> \"Male\", \"Male\", \"Male\", \"Male\", \"Male\", \"Male\", \"Male…\n$ Cartoon          <chr> \"Chota Bheem\", \"Chota Bheem\", \"Chota Bheem\", \"Chota B…\n$ Rating           <dbl> 8.5, 6.0, 8.0, 7.0, 8.0, 10.0, 5.0, 7.8, 8.5, 5.0, 7.…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Mutating by converting Gender and Cartoon into factors\n\ncartoon_modified <- cartoon %>%\n  dplyr::mutate(\n  Gender = as_factor(Gender),\n  Cartoon = as_factor(Cartoon)\n  )\nglimpse(cartoon_modified)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 90\nColumns: 4\n$ `Participant ID` <chr> \"P1\", \"P2\", \"P3\", \"P4\", \"P5\", \"P6\", \"P7\", \"P8\", \"P9\",…\n$ Gender           <fct> Male, Male, Male, Male, Male, Male, Male, Male, Male,…\n$ Cartoon          <fct> Chota Bheem, Chota Bheem, Chota Bheem, Chota Bheem, C…\n$ Rating           <dbl> 8.5, 6.0, 8.0, 7.0, 8.0, 10.0, 5.0, 7.8, 8.5, 5.0, 7.…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set graph theme\ntheme_set(new = theme_classic())\n##\ngf_histogram(~Rating,\n  fill = ~Cartoon,\n  data = cartoon_modified, alpha = 0.5\n) %>%\n  gf_vline(xintercept = ~ mean(Rating)) %>%\n  gf_labs(\n    title = \"Histograms of Cartoon Ratings Distributions\",\n    x = \"Rating\", y = \"Count\"\n  ) %>%\n  gf_text(11 ~ (mean(cartoon_modified$Rating) + 1.5),\n    label = \"Overall Mean\"\n  ) %>%\n  gf_refine(guides(fill = guide_legend(title = \"Cartoon\")))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Use of `cartoon_modified$Rating` is discouraged.\nℹ Use `Rating` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set graph theme\ntheme_set(new = theme_classic())\n\n# Creating faceted histograms with black outline, and overall mean line\ngf_histogram(~Rating,\n  data = cartoon_modified, alpha = 0.7, bins = 10,\n  fill = ~Cartoon, color = \"black\"  # Black outline\n) %>%\n  gf_facet_wrap(~Cartoon) %>%  # Facet by cartoon\n  gf_vline(xintercept = mean(~Rating, data = cartoon_modified), linetype = \"dashed\") %>%\n  gf_labs(\n    title = \"Histograms of Cartoon Ratings Distributions by Cartoon\",\n    x = \"Rating\", y = \"Count\"\n  ) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\nI tried facetting by cartoon, this way each cartoon’s rating distribution can be observed independently, making it easier to spot whether the cartoon has ratings clustered around high or low values. It also easy to compare how each cartoon's ratings match up with the overall mean.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set graph theme\ntheme_set(new = theme_classic())\n##\ngf_boxplot(\n  data = cartoon_modified,\n  Rating ~ Cartoon,\n  fill = ~ Cartoon,\n  alpha = 0.5\n) %>%\n   gf_vline(xintercept = mean(cartoon_modified$Rating)) %>%\n  gf_labs(\n    title = \"Boxplots of Cartoon Ratings vs Cartoon\",\n    x = \"Cartoon\", y = \"Rating\",\n    caption = \"Using ggprism\"\n  ) %>%\n  gf_refine(\n    scale_x_discrete(guide = \"prism_bracket\"),\n    guides(fill = guide_legend(title = \"Cartoon\"))\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The S3 guide system was deprecated in ggplot2 3.5.0.\nℹ It has been replaced by a ggproto system that can be extended.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n<https://av-quarto.netlify.app/content/courses/analytics/inference/modules/130-threemeansormore/>\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}